{
  "title": "Conversation Embeddings API Documentation",
  "version": "1.0.0",
  "content": "# Conversation Embeddings API\n\nThis document outlines the API endpoints available for storing and retrieving conversation embeddings.\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Store Conversation Endpoint](#store-conversation-endpoint)\n- [Search Conversations Endpoint](#search-conversations-endpoint)\n- [Data Models](#data-models)\n\n## Overview\n\nThe Conversation Embeddings API allows you to:\n\n1. Store conversations as vector embeddings for semantic search\n2. Search through stored conversations based on similarity to a query\n3. Retrieve context around matched messages\n\nThe system uses OpenAI's text-embedding-ada-002 model to generate vector embeddings of conversation messages.\n\n## Store Conversation Endpoint\n\n`POST /api/store-conversation-embedding`\n\nStores a conversation and generates embeddings for each message.\n\n### Request Body\n\n```json\n{\n  \"conversationId\": \"unique-conversation-id\",\n  \"title\": \"Optional conversation title\",\n  \"summary\": \"Optional conversation summary\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Message from user\"\n    },\n    {\n      \"role\": \"assistant\",\n      \"content\": \"Response from assistant\"\n    },\n    {\n      \"role\": \"system\",\n      \"content\": \"System message\",\n      \"metadata\": { \"key\": \"value\" }\n    }\n  ],\n  \"metadata\": { \"key\": \"value\" }\n}\n```\n\n### Response\n\n```json\n{\n  \"success\": true,\n  \"conversationId\": \"unique-conversation-id\",\n  \"messages\": 3\n}\n```\n\n### Error Codes\n\n- `400` - Bad request (missing or invalid parameters)\n- `500` - Server error\n\n## Search Conversations Endpoint\n\n`POST /api/search-conversation-embeddings`\n\nSearches for conversations based on semantic similarity to a query.\n\n### Request Body\n\n```json\n{\n  \"query\": \"What is the search query?\",\n  \"conversationId\": \"optional-specific-conversation-id\",\n  \"matchCount\": 5,\n  \"matchThreshold\": 0.7,\n  \"includeContext\": true\n}\n```\n\n### Parameters\n\n- `query` (required): The search query text\n- `conversationId` (optional): Limit search to a specific conversation\n- `matchCount` (optional): Maximum number of results to return (default: 5)\n- `matchThreshold` (optional): Minimum similarity threshold (0-1, default: 0.7)\n- `includeContext` (optional): Include messages before/after matches (default: false)\n\n### Response\n\n```json\n{\n  \"success\": true,\n  \"matches\": [\n    {\n      \"id\": 123,\n      \"conversation_id\": 456,\n      \"role\": \"assistant\",\n      \"content\": \"The matched message content\",\n      \"created_at\": \"2024-05-23T15:00:00Z\",\n      \"similarity\": 0.92,\n      \"conversation\": {\n        \"conversation_id\": \"unique-conversation-id\",\n        \"title\": \"Conversation title\",\n        \"created_at\": \"2024-05-23T14:30:00Z\"\n      },\n      \"context\": [\n        {\n          \"id\": 122,\n          \"role\": \"user\",\n          \"content\": \"Message before\",\n          \"created_at\": \"2024-05-23T14:58:00Z\"\n        },\n        {\n          \"id\": 123,\n          \"role\": \"assistant\",\n          \"content\": \"The matched message content\",\n          \"created_at\": \"2024-05-23T15:00:00Z\"\n        },\n        {\n          \"id\": 124,\n          \"role\": \"user\",\n          \"content\": \"Message after\",\n          \"created_at\": \"2024-05-23T15:02:00Z\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n## Data Models\n\n### Conversation\n\n```sql\nCREATE TABLE \"public\".\"conversation_history\" (\n  id bigserial PRIMARY KEY,\n  conversation_id text NOT NULL,\n  created_at timestamp with time zone NOT NULL DEFAULT now(),\n  title text,\n  summary text,\n  metadata jsonb\n);\n```\n\n### Message\n\n```sql\nCREATE TABLE \"public\".\"conversation_message\" (\n  id bigserial PRIMARY KEY,\n  conversation_id bigint NOT NULL REFERENCES public.conversation_history ON DELETE CASCADE,\n  role text NOT NULL,  -- 'user', 'assistant', 'system'\n  content text NOT NULL,\n  created_at timestamp with time zone NOT NULL DEFAULT now(),\n  token_count integer,\n  embedding vector(1536),\n  metadata jsonb\n);\n```\n\n### Search Function\n\n```sql\nCREATE OR REPLACE FUNCTION match_conversation_messages(\n  query_embedding vector(1536),\n  match_threshold float,\n  match_count int,\n  filter_conversation_id bigint DEFAULT NULL\n)\nRETURNS TABLE (\n  id bigint,\n  conversation_id bigint,\n  role text,\n  content text,\n  created_at timestamp with time zone,\n  similarity float\n)\n```\n\nThis search function uses cosine similarity to find messages that are semantically similar to the query embedding."
}
